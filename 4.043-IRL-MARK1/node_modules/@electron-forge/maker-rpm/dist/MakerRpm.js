"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpmArch = rpmArch;
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function rpmArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';

    case 'x64':
      return 'x86_64';

    case 'armv7l':
      return 'armv7hl';

    case 'arm':
      return 'armv6hl';

    default:
      return nodeArch;
  }
}

class MakerRpm extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'rpm');

    _defineProperty(this, "defaultPlatforms", ['linux']);

    _defineProperty(this, "requiredExternalBinaries", ['rpmbuild']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-installer-redhat');
  }

  async make({
    dir,
    makeDir,
    targetArch
  }) {
    // eslint-disable-next-line global-require, import/no-unresolved
    const installer = require('electron-installer-redhat');

    const outDir = _path.default.resolve(makeDir, 'rpm', targetArch);

    await this.ensureDirectory(outDir);
    const {
      packagePaths
    } = await installer({ ...this.config,
      arch: rpmArch(targetArch),
      src: dir,
      dest: outDir,
      rename: undefined
    });
    return packagePaths;
  }

}

exports.default = MakerRpm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclJwbS50cyJdLCJuYW1lcyI6WyJycG1BcmNoIiwibm9kZUFyY2giLCJNYWtlclJwbSIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsImluc3RhbGxlciIsInJlcXVpcmUiLCJvdXREaXIiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsInBhY2thZ2VQYXRocyIsImNvbmZpZyIsImFyY2giLCJzcmMiLCJkZXN0IiwicmVuYW1lIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBRUE7Ozs7OztBQUlPLFNBQVNBLE9BQVQsQ0FBaUJDLFFBQWpCLEVBQXNDO0FBQzNDLFVBQVFBLFFBQVI7QUFDRSxTQUFLLE1BQUw7QUFBYSxhQUFPLE1BQVA7O0FBQ2IsU0FBSyxLQUFMO0FBQVksYUFBTyxRQUFQOztBQUNaLFNBQUssUUFBTDtBQUFlLGFBQU8sU0FBUDs7QUFDZixTQUFLLEtBQUw7QUFBWSxhQUFPLFNBQVA7O0FBQ1o7QUFBUyxhQUFPQSxRQUFQO0FBTFg7QUFPRDs7QUFFYyxNQUFNQyxRQUFOLFNBQXVCQyxrQkFBdkIsQ0FBaUQ7QUFBQTtBQUFBOztBQUFBLGtDQUN2RCxLQUR1RDs7QUFBQSw4Q0FHMUIsQ0FBQyxPQUFELENBSDBCOztBQUFBLHNEQUt6QixDQUFDLFVBQUQsQ0FMeUI7QUFBQTs7QUFPOURDLEVBQUFBLDRCQUE0QixHQUFHO0FBQzdCLFdBQU8sS0FBS0MsV0FBTCxDQUFpQiwyQkFBakIsQ0FBUDtBQUNEOztBQUVELFFBQU1DLElBQU4sQ0FBVztBQUNUQyxJQUFBQSxHQURTO0FBRVRDLElBQUFBLE9BRlM7QUFHVEMsSUFBQUE7QUFIUyxHQUFYLEVBSWlCO0FBQ2Y7QUFDQSxVQUFNQyxTQUFTLEdBQUdDLE9BQU8sQ0FBQywyQkFBRCxDQUF6Qjs7QUFFQSxVQUFNQyxNQUFNLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYU4sT0FBYixFQUFzQixLQUF0QixFQUE2QkMsVUFBN0IsQ0FBZjs7QUFFQSxVQUFNLEtBQUtNLGVBQUwsQ0FBcUJILE1BQXJCLENBQU47QUFDQSxVQUFNO0FBQUVJLE1BQUFBO0FBQUYsUUFBbUIsTUFBTU4sU0FBUyxDQUFDLEVBQ3ZDLEdBQUcsS0FBS08sTUFEK0I7QUFFdkNDLE1BQUFBLElBQUksRUFBRWxCLE9BQU8sQ0FBQ1MsVUFBRCxDQUYwQjtBQUd2Q1UsTUFBQUEsR0FBRyxFQUFFWixHQUhrQztBQUl2Q2EsTUFBQUEsSUFBSSxFQUFFUixNQUppQztBQUt2Q1MsTUFBQUEsTUFBTSxFQUFFQztBQUwrQixLQUFELENBQXhDO0FBT0EsV0FBT04sWUFBUDtBQUNEOztBQTlCNkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlQXJjaCwgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IE1ha2VyUnBtQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gcnBtQXJjaChub2RlQXJjaDogRm9yZ2VBcmNoKSB7XG4gIHN3aXRjaCAobm9kZUFyY2gpIHtcbiAgICBjYXNlICdpYTMyJzogcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOiByZXR1cm4gJ3g4Nl82NCc7XG4gICAgY2FzZSAnYXJtdjdsJzogcmV0dXJuICdhcm12N2hsJztcbiAgICBjYXNlICdhcm0nOiByZXR1cm4gJ2FybXY2aGwnO1xuICAgIGRlZmF1bHQ6IHJldHVybiBub2RlQXJjaDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlclJwbSBleHRlbmRzIE1ha2VyQmFzZTxNYWtlclJwbUNvbmZpZz4ge1xuICBuYW1lID0gJ3JwbSc7XG5cbiAgZGVmYXVsdFBsYXRmb3JtczogRm9yZ2VQbGF0Zm9ybVtdID0gWydsaW51eCddO1xuXG4gIHJlcXVpcmVkRXh0ZXJuYWxCaW5hcmllczogc3RyaW5nW10gPSBbJ3JwbWJ1aWxkJ107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luc3RhbGxlZCgnZWxlY3Ryb24taW5zdGFsbGVyLXJlZGhhdCcpO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7XG4gICAgZGlyLFxuICAgIG1ha2VEaXIsXG4gICAgdGFyZ2V0QXJjaCxcbiAgfTogTWFrZXJPcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGdsb2JhbC1yZXF1aXJlLCBpbXBvcnQvbm8tdW5yZXNvbHZlZFxuICAgIGNvbnN0IGluc3RhbGxlciA9IHJlcXVpcmUoJ2VsZWN0cm9uLWluc3RhbGxlci1yZWRoYXQnKTtcblxuICAgIGNvbnN0IG91dERpciA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCAncnBtJywgdGFyZ2V0QXJjaCk7XG5cbiAgICBhd2FpdCB0aGlzLmVuc3VyZURpcmVjdG9yeShvdXREaXIpO1xuICAgIGNvbnN0IHsgcGFja2FnZVBhdGhzIH0gPSBhd2FpdCBpbnN0YWxsZXIoe1xuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBhcmNoOiBycG1BcmNoKHRhcmdldEFyY2gpLFxuICAgICAgc3JjOiBkaXIsXG4gICAgICBkZXN0OiBvdXREaXIsXG4gICAgICByZW5hbWU6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICByZXR1cm4gcGFja2FnZVBhdGhzO1xuICB9XG59XG4iXX0=