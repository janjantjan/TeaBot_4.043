"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debianArch = debianArch;
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function debianArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';

    case 'x64':
      return 'amd64';

    case 'armv7l':
      return 'armhf';

    case 'arm':
      return 'armel';

    default:
      return nodeArch;
  }
}

class MakerDeb extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'deb');

    _defineProperty(this, "defaultPlatforms", ['linux']);

    _defineProperty(this, "requiredExternalBinaries", ['dpkg', 'fakeroot']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-installer-debian');
  }

  async make({
    dir,
    makeDir,
    targetArch
  }) {
    // eslint-disable-next-line global-require, import/no-unresolved
    const installer = require('electron-installer-debian');

    const outDir = _path.default.resolve(makeDir, 'deb', targetArch);

    await this.ensureDirectory(outDir);
    const {
      packagePaths
    } = await installer({
      options: {},
      ...this.config,
      arch: debianArch(targetArch),
      src: dir,
      dest: outDir,
      rename: undefined
    });
    return packagePaths;
  }

}

exports.default = MakerDeb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlckRlYi50cyJdLCJuYW1lcyI6WyJkZWJpYW5BcmNoIiwibm9kZUFyY2giLCJNYWtlckRlYiIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsImluc3RhbGxlciIsInJlcXVpcmUiLCJvdXREaXIiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZURpcmVjdG9yeSIsInBhY2thZ2VQYXRocyIsIm9wdGlvbnMiLCJjb25maWciLCJhcmNoIiwic3JjIiwiZGVzdCIsInJlbmFtZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7QUFJTyxTQUFTQSxVQUFULENBQW9CQyxRQUFwQixFQUF5QztBQUM5QyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQWEsYUFBTyxNQUFQOztBQUNiLFNBQUssS0FBTDtBQUFZLGFBQU8sT0FBUDs7QUFDWixTQUFLLFFBQUw7QUFBZSxhQUFPLE9BQVA7O0FBQ2YsU0FBSyxLQUFMO0FBQVksYUFBTyxPQUFQOztBQUNaO0FBQVMsYUFBT0EsUUFBUDtBQUxYO0FBT0Q7O0FBRWMsTUFBTUMsUUFBTixTQUF1QkMsa0JBQXZCLENBQWlEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDdkQsS0FEdUQ7O0FBQUEsOENBRzFCLENBQUMsT0FBRCxDQUgwQjs7QUFBQSxzREFLekIsQ0FBQyxNQUFELEVBQVMsVUFBVCxDQUx5QjtBQUFBOztBQU85REMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLDJCQUFqQixDQUFQO0FBQ0Q7O0FBRUQsUUFBTUMsSUFBTixDQUFXO0FBQ1RDLElBQUFBLEdBRFM7QUFFVEMsSUFBQUEsT0FGUztBQUdUQyxJQUFBQTtBQUhTLEdBQVgsRUFJaUI7QUFDZjtBQUNBLFVBQU1DLFNBQVMsR0FBR0MsT0FBTyxDQUFDLDJCQUFELENBQXpCOztBQUVBLFVBQU1DLE1BQU0sR0FBR0MsY0FBS0MsT0FBTCxDQUFhTixPQUFiLEVBQXNCLEtBQXRCLEVBQTZCQyxVQUE3QixDQUFmOztBQUVBLFVBQU0sS0FBS00sZUFBTCxDQUFxQkgsTUFBckIsQ0FBTjtBQUNBLFVBQU07QUFBRUksTUFBQUE7QUFBRixRQUFtQixNQUFNTixTQUFTLENBQUM7QUFDdkNPLE1BQUFBLE9BQU8sRUFBRSxFQUQ4QjtBQUV2QyxTQUFHLEtBQUtDLE1BRitCO0FBR3ZDQyxNQUFBQSxJQUFJLEVBQUVuQixVQUFVLENBQUNTLFVBQUQsQ0FIdUI7QUFJdkNXLE1BQUFBLEdBQUcsRUFBRWIsR0FKa0M7QUFLdkNjLE1BQUFBLElBQUksRUFBRVQsTUFMaUM7QUFNdkNVLE1BQUFBLE1BQU0sRUFBRUM7QUFOK0IsS0FBRCxDQUF4QztBQVNBLFdBQU9QLFlBQVA7QUFDRDs7QUFoQzZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1ha2VyQmFzZSwgeyBNYWtlck9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvbWFrZXItYmFzZSc7XG5pbXBvcnQgeyBGb3JnZUFyY2gsIEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5pbXBvcnQgeyBNYWtlckRlYkNvbmZpZyB9IGZyb20gJy4vQ29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIGRlYmlhbkFyY2gobm9kZUFyY2g6IEZvcmdlQXJjaCkge1xuICBzd2l0Y2ggKG5vZGVBcmNoKSB7XG4gICAgY2FzZSAnaWEzMic6IHJldHVybiAnaTM4Nic7XG4gICAgY2FzZSAneDY0JzogcmV0dXJuICdhbWQ2NCc7XG4gICAgY2FzZSAnYXJtdjdsJzogcmV0dXJuICdhcm1oZic7XG4gICAgY2FzZSAnYXJtJzogcmV0dXJuICdhcm1lbCc7XG4gICAgZGVmYXVsdDogcmV0dXJuIG5vZGVBcmNoO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VyRGViIGV4dGVuZHMgTWFrZXJCYXNlPE1ha2VyRGViQ29uZmlnPiB7XG4gIG5hbWUgPSAnZGViJztcblxuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ2xpbnV4J107XG5cbiAgcmVxdWlyZWRFeHRlcm5hbEJpbmFyaWVzOiBzdHJpbmdbXSA9IFsnZHBrZycsICdmYWtlcm9vdCddO1xuXG4gIGlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNJbnN0YWxsZWQoJ2VsZWN0cm9uLWluc3RhbGxlci1kZWJpYW4nKTtcbiAgfVxuXG4gIGFzeW5jIG1ha2Uoe1xuICAgIGRpcixcbiAgICBtYWtlRGlyLFxuICAgIHRhcmdldEFyY2gsXG4gIH06IE1ha2VyT3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZSwgaW1wb3J0L25vLXVucmVzb2x2ZWRcbiAgICBjb25zdCBpbnN0YWxsZXIgPSByZXF1aXJlKCdlbGVjdHJvbi1pbnN0YWxsZXItZGViaWFuJyk7XG5cbiAgICBjb25zdCBvdXREaXIgPSBwYXRoLnJlc29sdmUobWFrZURpciwgJ2RlYicsIHRhcmdldEFyY2gpO1xuXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVEaXJlY3Rvcnkob3V0RGlyKTtcbiAgICBjb25zdCB7IHBhY2thZ2VQYXRocyB9ID0gYXdhaXQgaW5zdGFsbGVyKHtcbiAgICAgIG9wdGlvbnM6IHt9LFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgICBhcmNoOiBkZWJpYW5BcmNoKHRhcmdldEFyY2gpLFxuICAgICAgc3JjOiBkaXIsXG4gICAgICBkZXN0OiBvdXREaXIsXG4gICAgICByZW5hbWU6IHVuZGVmaW5lZCxcbiAgICB9KTtcblxuICAgIHJldHVybiBwYWNrYWdlUGF0aHM7XG4gIH1cbn1cbiJdfQ==