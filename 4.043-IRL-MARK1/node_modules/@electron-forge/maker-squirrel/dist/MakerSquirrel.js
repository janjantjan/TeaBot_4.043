"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _electronWinstaller = require("electron-winstaller");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerSquirrel extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'squirrel');

    _defineProperty(this, "defaultPlatforms", ['win32']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-winstaller') && !process.env.DISABLE_SQUIRREL_TEST;
  }

  async make({
    dir,
    makeDir,
    targetArch,
    packageJSON,
    appName
  }) {
    const outPath = _path.default.resolve(makeDir, `squirrel.windows/${targetArch}`);

    await this.ensureDirectory(outPath);
    const winstallerConfig = {
      name: packageJSON.name,
      title: appName,
      noMsi: true,
      exe: `${appName}.exe`,
      setupExe: `${appName}-${packageJSON.version} Setup.exe`,
      ...this.config,
      appDirectory: dir,
      outputDirectory: outPath
    };
    await (0, _electronWinstaller.createWindowsInstaller)(winstallerConfig);
    const nupkgVersion = (0, _electronWinstaller.convertVersion)(packageJSON.version);
    const artifacts = [_path.default.resolve(outPath, 'RELEASES'), _path.default.resolve(outPath, winstallerConfig.setupExe || `${appName}Setup.exe`), _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-full.nupkg`)];

    const deltaPath = _path.default.resolve(outPath, `${winstallerConfig.name}-${nupkgVersion}-delta.nupkg`);

    if (winstallerConfig.remoteReleases || (await _fsExtra.default.pathExists(deltaPath))) {
      artifacts.push(deltaPath);
    }

    const msiPath = _path.default.resolve(outPath, winstallerConfig.setupMsi || `${appName}Setup.msi`);

    if (!winstallerConfig.noMsi && (await _fsExtra.default.pathExists(msiPath))) {
      artifacts.push(msiPath);
    }

    return artifacts;
  }

}

exports.default = MakerSquirrel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclNxdWlycmVsLnRzIl0sIm5hbWVzIjpbIk1ha2VyU3F1aXJyZWwiLCJNYWtlckJhc2UiLCJpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtIiwiaXNJbnN0YWxsZWQiLCJwcm9jZXNzIiwiZW52IiwiRElTQUJMRV9TUVVJUlJFTF9URVNUIiwibWFrZSIsImRpciIsIm1ha2VEaXIiLCJ0YXJnZXRBcmNoIiwicGFja2FnZUpTT04iLCJhcHBOYW1lIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZW5zdXJlRGlyZWN0b3J5Iiwid2luc3RhbGxlckNvbmZpZyIsIm5hbWUiLCJ0aXRsZSIsIm5vTXNpIiwiZXhlIiwic2V0dXBFeGUiLCJ2ZXJzaW9uIiwiY29uZmlnIiwiYXBwRGlyZWN0b3J5Iiwib3V0cHV0RGlyZWN0b3J5IiwibnVwa2dWZXJzaW9uIiwiYXJ0aWZhY3RzIiwiZGVsdGFQYXRoIiwicmVtb3RlUmVsZWFzZXMiLCJmcyIsInBhdGhFeGlzdHMiLCJwdXNoIiwibXNpUGF0aCIsInNldHVwTXNpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7O0FBSWUsTUFBTUEsYUFBTixTQUE0QkMsa0JBQTVCLENBQTJEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDakUsVUFEaUU7O0FBQUEsOENBR3BDLENBQUMsT0FBRCxDQUhvQztBQUFBOztBQUt4RUMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLHFCQUFqQixLQUEyQyxDQUFDQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMscUJBQS9EO0FBQ0Q7O0FBRUQsUUFBTUMsSUFBTixDQUFXO0FBQ1RDLElBQUFBLEdBRFM7QUFFVEMsSUFBQUEsT0FGUztBQUdUQyxJQUFBQSxVQUhTO0FBSVRDLElBQUFBLFdBSlM7QUFLVEMsSUFBQUE7QUFMUyxHQUFYLEVBTWlCO0FBQ2YsVUFBTUMsT0FBTyxHQUFHQyxjQUFLQyxPQUFMLENBQWFOLE9BQWIsRUFBdUIsb0JBQW1CQyxVQUFXLEVBQXJELENBQWhCOztBQUNBLFVBQU0sS0FBS00sZUFBTCxDQUFxQkgsT0FBckIsQ0FBTjtBQUVBLFVBQU1JLGdCQUEyQyxHQUFHO0FBQ2xEQyxNQUFBQSxJQUFJLEVBQUVQLFdBQVcsQ0FBQ08sSUFEZ0M7QUFFbERDLE1BQUFBLEtBQUssRUFBRVAsT0FGMkM7QUFHbERRLE1BQUFBLEtBQUssRUFBRSxJQUgyQztBQUlsREMsTUFBQUEsR0FBRyxFQUFHLEdBQUVULE9BQVEsTUFKa0M7QUFLbERVLE1BQUFBLFFBQVEsRUFBRyxHQUFFVixPQUFRLElBQUdELFdBQVcsQ0FBQ1ksT0FBUSxZQUxNO0FBTWxELFNBQUcsS0FBS0MsTUFOMEM7QUFPbERDLE1BQUFBLFlBQVksRUFBRWpCLEdBUG9DO0FBUWxEa0IsTUFBQUEsZUFBZSxFQUFFYjtBQVJpQyxLQUFwRDtBQVdBLFVBQU0sZ0RBQXVCSSxnQkFBdkIsQ0FBTjtBQUVBLFVBQU1VLFlBQVksR0FBRyx3Q0FBZWhCLFdBQVcsQ0FBQ1ksT0FBM0IsQ0FBckI7QUFFQSxVQUFNSyxTQUFTLEdBQUcsQ0FDaEJkLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUFzQixVQUF0QixDQURnQixFQUVoQkMsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXNCSSxnQkFBZ0IsQ0FBQ0ssUUFBakIsSUFBOEIsR0FBRVYsT0FBUSxXQUE5RCxDQUZnQixFQUdoQkUsY0FBS0MsT0FBTCxDQUFhRixPQUFiLEVBQXVCLEdBQUVJLGdCQUFnQixDQUFDQyxJQUFLLElBQUdTLFlBQWEsYUFBL0QsQ0FIZ0IsQ0FBbEI7O0FBS0EsVUFBTUUsU0FBUyxHQUFHZixjQUFLQyxPQUFMLENBQWFGLE9BQWIsRUFBdUIsR0FBRUksZ0JBQWdCLENBQUNDLElBQUssSUFBR1MsWUFBYSxjQUEvRCxDQUFsQjs7QUFDQSxRQUFJVixnQkFBZ0IsQ0FBQ2EsY0FBakIsS0FBbUMsTUFBTUMsaUJBQUdDLFVBQUgsQ0FBY0gsU0FBZCxDQUF6QyxDQUFKLEVBQXVFO0FBQ3JFRCxNQUFBQSxTQUFTLENBQUNLLElBQVYsQ0FBZUosU0FBZjtBQUNEOztBQUNELFVBQU1LLE9BQU8sR0FBR3BCLGNBQUtDLE9BQUwsQ0FBYUYsT0FBYixFQUFzQkksZ0JBQWdCLENBQUNrQixRQUFqQixJQUE4QixHQUFFdkIsT0FBUSxXQUE5RCxDQUFoQjs7QUFDQSxRQUFJLENBQUNLLGdCQUFnQixDQUFDRyxLQUFsQixLQUEyQixNQUFNVyxpQkFBR0MsVUFBSCxDQUFjRSxPQUFkLENBQWpDLENBQUosRUFBNkQ7QUFDM0ROLE1BQUFBLFNBQVMsQ0FBQ0ssSUFBVixDQUFlQyxPQUFmO0FBQ0Q7O0FBQ0QsV0FBT04sU0FBUDtBQUNEOztBQWhEdUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IHsgY29udmVydFZlcnNpb24sIGNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIsIE9wdGlvbnMgYXMgRWxlY3Ryb25XaW5zdGFsbGVyT3B0aW9ucyB9IGZyb20gJ2VsZWN0cm9uLXdpbnN0YWxsZXInO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG50eXBlIE1ha2VyU3F1aXJyZWxDb25maWcgPSBPbWl0PEVsZWN0cm9uV2luc3RhbGxlck9wdGlvbnMsICdhcHBEaXJlY3RvcnknIHwgJ291dHB1dERpcmVjdG9yeSc+XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ha2VyU3F1aXJyZWwgZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJTcXVpcnJlbENvbmZpZz4ge1xuICBuYW1lID0gJ3NxdWlycmVsJztcblxuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ3dpbjMyJ107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luc3RhbGxlZCgnZWxlY3Ryb24td2luc3RhbGxlcicpICYmICFwcm9jZXNzLmVudi5ESVNBQkxFX1NRVUlSUkVMX1RFU1Q7XG4gIH1cblxuICBhc3luYyBtYWtlKHtcbiAgICBkaXIsXG4gICAgbWFrZURpcixcbiAgICB0YXJnZXRBcmNoLFxuICAgIHBhY2thZ2VKU09OLFxuICAgIGFwcE5hbWUsXG4gIH06IE1ha2VyT3B0aW9ucykge1xuICAgIGNvbnN0IG91dFBhdGggPSBwYXRoLnJlc29sdmUobWFrZURpciwgYHNxdWlycmVsLndpbmRvd3MvJHt0YXJnZXRBcmNofWApO1xuICAgIGF3YWl0IHRoaXMuZW5zdXJlRGlyZWN0b3J5KG91dFBhdGgpO1xuXG4gICAgY29uc3Qgd2luc3RhbGxlckNvbmZpZzogRWxlY3Ryb25XaW5zdGFsbGVyT3B0aW9ucyA9IHtcbiAgICAgIG5hbWU6IHBhY2thZ2VKU09OLm5hbWUsXG4gICAgICB0aXRsZTogYXBwTmFtZSxcbiAgICAgIG5vTXNpOiB0cnVlLFxuICAgICAgZXhlOiBgJHthcHBOYW1lfS5leGVgLFxuICAgICAgc2V0dXBFeGU6IGAke2FwcE5hbWV9LSR7cGFja2FnZUpTT04udmVyc2lvbn0gU2V0dXAuZXhlYCxcbiAgICAgIC4uLnRoaXMuY29uZmlnLFxuICAgICAgYXBwRGlyZWN0b3J5OiBkaXIsXG4gICAgICBvdXRwdXREaXJlY3Rvcnk6IG91dFBhdGgsXG4gICAgfTtcblxuICAgIGF3YWl0IGNyZWF0ZVdpbmRvd3NJbnN0YWxsZXIod2luc3RhbGxlckNvbmZpZyk7XG5cbiAgICBjb25zdCBudXBrZ1ZlcnNpb24gPSBjb252ZXJ0VmVyc2lvbihwYWNrYWdlSlNPTi52ZXJzaW9uKTtcblxuICAgIGNvbnN0IGFydGlmYWN0cyA9IFtcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCAnUkVMRUFTRVMnKSxcbiAgICAgIHBhdGgucmVzb2x2ZShvdXRQYXRoLCB3aW5zdGFsbGVyQ29uZmlnLnNldHVwRXhlIHx8IGAke2FwcE5hbWV9U2V0dXAuZXhlYCksXG4gICAgICBwYXRoLnJlc29sdmUob3V0UGF0aCwgYCR7d2luc3RhbGxlckNvbmZpZy5uYW1lfS0ke251cGtnVmVyc2lvbn0tZnVsbC5udXBrZ2ApLFxuICAgIF07XG4gICAgY29uc3QgZGVsdGFQYXRoID0gcGF0aC5yZXNvbHZlKG91dFBhdGgsIGAke3dpbnN0YWxsZXJDb25maWcubmFtZX0tJHtudXBrZ1ZlcnNpb259LWRlbHRhLm51cGtnYCk7XG4gICAgaWYgKHdpbnN0YWxsZXJDb25maWcucmVtb3RlUmVsZWFzZXMgfHwgYXdhaXQgZnMucGF0aEV4aXN0cyhkZWx0YVBhdGgpKSB7XG4gICAgICBhcnRpZmFjdHMucHVzaChkZWx0YVBhdGgpO1xuICAgIH1cbiAgICBjb25zdCBtc2lQYXRoID0gcGF0aC5yZXNvbHZlKG91dFBhdGgsIHdpbnN0YWxsZXJDb25maWcuc2V0dXBNc2kgfHwgYCR7YXBwTmFtZX1TZXR1cC5tc2lgKTtcbiAgICBpZiAoIXdpbnN0YWxsZXJDb25maWcubm9Nc2kgJiYgYXdhaXQgZnMucGF0aEV4aXN0cyhtc2lQYXRoKSkge1xuICAgICAgYXJ0aWZhY3RzLnB1c2gobXNpUGF0aCk7XG4gICAgfVxuICAgIHJldHVybiBhcnRpZmFjdHM7XG4gIH1cbn1cbiJdfQ==